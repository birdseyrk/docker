---

- hosts: all
  gather_facts: true

  # Register the Ansible Variables
  vars:
    debug: true
    sendRequest: true
    lastUpdate: "{{ansible_date_time.date}}:{{ansible_date_time.time}}"
    epoch: "{{ansible_date_time.epoch}}"
    register_master: false;
    register_node: false;
    master_dead: false;

  # defines the Ansible tasks

  tasks:

  - name: Print The hostname
    ignore_unreachable: true
    ansible.builtin.debug:
      var: inventory_hostname
    when: debug

  - name: ping host
    ignore_unreachable: true
    shell: ping -c 1 ansible-master
    register: myPing
    ignore_errors: yes
    when: "'ubuntu2' in inventory_hostname"

  - name: print myPing 
    ignore_unreachable: true
    ansible.builtin.debug:
      var: myPing
    when: "'ubuntu2' in inventory_hostname"

  # - name: Set single ips
  #   ignore_unreachable: true
  #   ansible.builtin.set_fact:
  #     master_dead: "{{( (hostip.stdout is defined ) }}"
  #   when: "'ubuntu2' in inventory_hostname"

  # - name: print singles
  #   ignore_unreachable: true
  #   ansible.builtin.debug:
  #     var: mySingleIPs
  #   when: "'ubuntu2' in inventory_hostname"

  - name: host IP
    ignore_unreachable: true
    shell: hostname -i
    register: hostip
    ignore_errors: yes

  - name: check for ip address 
    ignore_unreachable: true
    ansible.builtin.debug:
      var: hostip.stdout
    when: "'UNREACHABLE' in hostip.stdout"

  # - name: restart the ssh service
  #   ignore_unreachable: true
  #   become: true
  #   become_user: root
  #   vars:
  #     ansible_become_pass: ansadmin
  #   shell: service ssh restartvi 
  #   register: restart
  #   when: "'UNREACHABLE' in hostip.stdout" 

  # - name: restart the ssh service
  #   ignore_unreachable: true
  #   shell: /setup/restart-ssh-service.sh '{{inventory_hostname}}'
  #   register: hostip
  #   ignore_errors: yes 
    
  # - name: print restart
  #   ignore_unreachable: true
  #   ansible.builtin.debug:
  #     var: restart
  #   when: "'UNREACHABLE' in hostip.stdout" 

  - name: print hostip
    ignore_unreachable: true
    ansible.builtin.debug:
      var: hostip.stdout
    when: debug

  - name: Set double ips
    ignore_unreachable: true
    ansible.builtin.set_fact:
      myDoubleIPs: "{{( (hostip.stdout is defined ) and ( ((hostip.stdout |length)-1)  > 14) | bool )}}"

  - name: Set single ips
    ignore_unreachable: true
    ansible.builtin.set_fact:
      mySingleIPs: "{{( (hostip.stdout is defined ) and ( ((hostip.stdout |length)-1)  < 14) | bool )}}"

  - name: print singles
    ignore_unreachable: true
    ansible.builtin.debug:
      var: mySingleIPs
    when: debug

  - name: print doubles
    ignore_unreachable: true
    ansible.builtin.debug:
      var: myDoubleIPs
    when: debug

  # always add the ip, then over ride if it is a double.
  - name: Set myIP
    ignore_unreachable: true
    ansible.builtin.set_fact:
      myIP: "{{hostip.stdout}}"

  - name: print myIP - single IPs
    ignore_unreachable: true
    ansible.builtin.debug:
      var: myIP
    when: mySingleIPs and debug

  #override myIP if the ip was doubled, get the second ip
  - name: Set myIP - Double IPs
    ignore_unreachable: true
    ansible.builtin.set_fact:
      myIP: "{{hostip.stdout.split(' ').1}}"
    when: myDoubleIPs

  - name: print myIP - double Ips
    ignore_unreachable: true
    ansible.builtin.debug:
      var: myIP
    when: myDoubleIPs and debug

  - name: Set host line
    ignore_unreachable: true
    ansible.builtin.set_fact:
      myLine: "{{myIP + ' ' + inventory_hostname}}"

  - name: print myLine
    ignore_unreachable: true
    ansible.builtin.debug:
      var: myLine
    when: debug

  # Cut the Uptime from the results
  - name: Check uptime
    shell: cut -d ' ' -f1 /proc/uptime
    register: uptimeoutput

  # Print the uptime
  - name: Print The uptime
    ansible.builtin.debug:
      var: uptimeoutput.stdout_lines[0]
    when: debug

  - name: Set register_master
    ansible.builtin.set_fact:
      register_master: true
    ignore_unreachable: true
    when: (inventory_hostname == "ansible-master") and (uptimeoutput.stdout is undefined )

  # Print the hostname
  - name: Print register_master
    ignore_unreachable: true
    ansible.builtin.debug:
      var: register_master
    when: debug

  - name: Set register_node
    ansible.builtin.set_fact:
      register_node: true
    ignore_unreachable: true
    when: (inventory_hostname.split('-').0 =="ubuntu") and (uptimeoutput.stdout is undefined )

  # Print the hostname
  - name: Print register_node
    ignore_unreachable: true
    ansible.builtin.debug:
      var: register_node
    when: debug

  # add the host
  # - name: Add the host to ect hosts
  #   shell: /setup/add-host-hostfile.sh '{{myLine}}'
  #   register: addhost 
  #   when: register_master or register_node

  # Print the current date
  - name: Print the current date
    ansible.builtin.debug:
      #var: ansible_date_time.date
      var: lastUpdate
    when: debug

  # Initialize the hostname
  - name: Initialize the hostname data object
    ansible.builtin.set_fact:
      serverstatus: {"hostname":"{{ inventory_hostname }}","uptime":"{{uptimeoutput.stdout_lines[0] }}","lastupdate":"{{lastUpdate}}","epoch":"{{epoch}}" }

  # Print the serverstatus
  - name: Print the serverstatus
    ansible.builtin.debug:
      var: serverstatus
    when: debug

  # nodeport - "http://nginx.ingress.192.168.1.100.nip.io:30850/uptime"
  # ingress - "http://nginx.ingress.192.168.1.100.nip.io:8085/uptime"


  - name: POST from contents of local file
    ansible.builtin.uri:
      url: "http://nginx.ingress.192.168.1.100.nip.io:30850/uptime"
      method: POST
      return_content: yes
      body_format: "json"
      body: "{{ serverstatus }}"
      status_code: 201
    when: sendRequest

      

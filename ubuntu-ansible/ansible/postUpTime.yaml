---

- hosts: all
  gather_facts: true

  # Register the Ansible Variables
  vars:
    debug: false
    sendRequest: true
    lastUpdate: "{{ansible_date_time.date}}:{{ansible_date_time.time}}"
    epoch: "{{ansible_date_time.epoch}}"
    register_master: false;
    register_node: false;

  # defines the Ansible tasks

  tasks:
  
  # - name: whoami 
  #   shell: whoami 
  #   register: whoami
  #   ignore_unreachable: true 

  # # Print whoami
  # - name: Print whoami
  #   ansible.builtin.debug:
  #     var: whoami.stdout
  #   ignore_unreachable: true
  #   #when: debug
  

  # - name: Set register_master
  #   ansible.builtin.set_fact:
  #     register_master: true
  #   ignore_unreachable: true
  #   when: (inventory_hostname == "ansible-master") and (uptimeoutput.stdout is undefined )

  # - name: Set Master 
  #   shell: /setup/setup-master.sh
  #   register: set_master
  #   ignore_unreachable: true
  #   when: (inventory_hostname == "ansible-master") and (uptimeoutput.stdout is undefined )

  # - name: Set Node 
  #   shell: /setup/setup-node.sh
  #   register: set_node
  #   ignore_unreachable: true
  #   when: (inventory_hostname.split('-').0 =="ubuntu") and (uptimeoutput.stdout is undefined )


  # # Print the register_master
  # - name: Print The register_master
  #   ansible.builtin.debug:
  #     var: register_master
  #   ignore_unreachable: true
  #   #when: debug

  # - name: Set register_node
  #   ansible.builtin.set_fact:
  #     register_node: true
  #   ignore_unreachable: true
  #   when: (inventory_hostname.split('-').0 =="ubuntu") and (uptimeoutput.stdout is undefined )
  #   #when: (inventory_hostname == "ansible-master") and (uptimeoutput.stdout is undefined )

  # # Print the register_node
  # - name: Print The register_node
  #   ansible.builtin.debug:
  #     var: register_node
  #   ignore_unreachable: true
  #   #when: debug



  # Print the hostname
  - name: Print The hostname when ansible-master
    ansible.builtin.debug:
      var: inventory_hostname
    when: inventory_hostname == "ansible-master"

  - name: host IP
    ignore_unreachable: true
    shell: hostname -i
    register: hostip
    ignore_errors: yes
    when: debug

  - name: Set host line
    ansible.builtin.set_fact:
      myIP: "{{hostip.stdout.split(' ').1}}"
    when: (hostip.stdout is defined )

  - name: print hostip
    ansible.builtin.debug:
      var: myIP
    when: debug

  - name: Set host line
    ansible.builtin.set_fact:
      myLine: "{{myIP + ' ' + inventory_hostname}}"

  - name: print myLine
    ansible.builtin.debug:
      var: myLine
    when: debug

  # Cut the Uptime from the results
  - name: Check uptime
    shell: cut -d ' ' -f1 /proc/uptime
    register: uptimeoutput

  # - name: Test 
  #   ansible.builtin.debug:
  #     var: uptimeoutput.stdout_lines[0]
  #   when: uptimeoutput.stdout_lines[0] == "VARIABLE IS NOT DEFINED!" and  inventory_hostname == "ansible-master"

  # Print the uptime
  - name: Print The uptime
    ansible.builtin.debug:
      var: uptimeoutput.stdout_lines[0]
    when: debug

  # Print the current date
  - name: Print the current date
    ansible.builtin.debug:
      #var: ansible_date_time.date
      var: lastUpdate
    when: debug

  # Initialize the hostname
  - name: Initialize the hostname data object
    ansible.builtin.set_fact:
      serverstatus: {"hostname":"{{ inventory_hostname }}","uptime":"{{uptimeoutput.stdout_lines[0] }}","lastupdate":"{{lastUpdate}}","epoch":"{{epoch}}" }

  # Print the serverstatus
  - name: Print the serverstatus
    ansible.builtin.debug:
      var: serverstatus
    when: debug

  # nodeport - "http://nginx.ingress.192.168.1.100.nip.io:30850/uptime"
  # ingress - "http://nginx.ingress.192.168.1.100.nip.io:8085/uptime"


  - name: POST from contents of local file
    ansible.builtin.uri:
      url: "http://nginx.ingress.192.168.1.100.nip.io:30850/uptime"
      method: POST
      return_content: yes
      body_format: "json"
      body: "{{ serverstatus }}"
      status_code: 201
    when: sendRequest

      
